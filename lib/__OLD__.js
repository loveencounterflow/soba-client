// Generated by CoffeeScript 1.8.0
(function() {
  var __slice = [].slice;

  this.test_dense_sort = function(me) {
    var input;
    input = D.create_throughstream();
    input.pipe($((function(_this) {
      return function(event, send) {
        var idx, letter, tail, type;
        type = event[0], tail = 2 <= event.length ? __slice.call(event, 1) : [];
        if (type === 'batch') {
          idx = tail[0], letter = tail[1];
          whisper(idx, letter);
        }
        return send(event);
      };
    })(this))).pipe(D2.$dense_sort(1, 0, function(_arg) {
      var efficiency, event_count, max_buffer_size, percentage;
      event_count = _arg[0], max_buffer_size = _arg[1];
      percentage = (max_buffer_size / event_count * 100).toFixed(2);
      efficiency = (1 - max_buffer_size / event_count).toFixed(2);
      return info("of " + event_count + " elements, up to " + max_buffer_size + " (" + percentage + "%) had to be buffered;\nefficiency: " + efficiency);
    })).pipe($((function(_this) {
      return function(event, send) {
        var idx, letter, tail, type;
        type = event[0], tail = 2 <= event.length ? __slice.call(event, 1) : [];
        if (type === 'batch') {
          idx = tail[0], letter = tail[1];
          help(idx, letter);
        }
        return send(event);
      };
    })(this))).pipe(D.$on_end((function(_this) {
      return function(send, end) {
        return process.exit();
      };
    })(this)));
    input.write(['batch', 0, 'A']);
    input.write(['batch', 2, 'C']);
    input.write(['batch', 4, 'E']);
    input.write(['batch', 5, 'F']);
    input.write(['batch', 1, 'B']);
    input.write(['batch', 3, 'D']);
    return input.end();
  };

}).call(this);
