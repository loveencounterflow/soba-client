// Generated by CoffeeScript 1.8.0

/*
#===========================================================================================================



 .d8888b.   .d88888b.  888888b.          d8888     .d8888b.  888      8888888 8888888888 888b    888 88888888888
d88P  Y88b d88P" "Y88b 888  "88b        d88888    d88P  Y88b 888        888   888        8888b   888     888
Y88b.      888     888 888  .88P       d88P888    888    888 888        888   888        88888b  888     888
 "Y888b.   888     888 8888888K.      d88P 888    888        888        888   8888888    888Y88b 888     888
    "Y88b. 888     888 888  "Y88b    d88P  888    888        888        888   888        888 Y88b888     888
      "888 888     888 888    888   d88P   888    888    888 888        888   888        888  Y88888     888
Y88b  d88P Y88b. .d88P 888   d88P  d8888888888    Y88b  d88P 888        888   888        888   Y8888     888
 "Y8888P"   "Y88888P"  8888888P"  d88P     888     "Y8888P"  88888888 8888888 8888888888 888    Y888     888



#===========================================================================================================
 */

(function() {
  var $, CND, D, D2, SOBAC, TEXT, alert, badge, debug, help, info, new_socket, njs_fs, njs_path, original_onevent, random_integer, rpr, socket, urge, warn, whisper,
    __slice = [].slice;

  njs_path = require('path');

  njs_fs = require('fs');

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'ソバ/CLIENT';

  info = CND.get_logger('info', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  urge = CND.get_logger('urge', badge);

  whisper = CND.get_logger('whisper', badge);

  help = CND.get_logger('help', badge);

  TEXT = require('coffeenode-text');


  /* https://github.com/loveencounterflow/pipedreams */

  D = require('pipedreams');

  D2 = require('pipedreams2');

  $ = D2.remit.bind(D);

  random_integer = CND.get_rnd_int(592, 762);

  new_socket = require('socket.io-client');

  socket = new_socket('http://0.0.0.0:3000/');


  /* **NB** difference to server side:
    * no `connection` event, but `connect`
    * no `socket` argument; use `socket` to listen for events.
   */

  socket.on('connect', function() {
    return help("client: connect");
  });

  socket.on('connect_error', function() {
    return help("client: connect_error");
  });

  socket.on('connect_timeout', function() {
    return help("client: connect_timeout");
  });

  socket.on('reconnect', function() {
    return help("client: reconnect");
  });

  socket.on('reconnect_attempt', function() {
    return help("client: reconnect_attempt");
  });

  socket.on('reconnect_error', function() {
    return help("client: reconnect_error");
  });

  socket.on('reconnect_failed', function() {
    return help("client: reconnect_failed");
  });

  socket.on('reconnecting', function() {
    return help("client: reconnecting");
  });

  original_onevent = socket.onevent.bind(socket);

  socket.onevent = function(Q) {
    var data, type, _ref;
    _ref = Q['data'], type = _ref[0], data = _ref[1];
    return original_onevent(Q);
  };

  socket.on('connect', function() {
    var CHR, P, confluence, count, glyph, glyphs, limit, skip, _i, _len;
    P = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    help("SoBa ソバ Client running on Node v" + process.versions['node']);

    /* TAINT get address from connection / options */
    help("SoBa ソバ Client connected to http://0.0.0.0:3000/");
    socket.emit('helo');
    count = 3;
    skip = 0;
    limit = skip + count;
    CHR = require('coffeenode-chr');
    glyphs = CHR.chrs_from_text('一二三');
    count = 0;
    confluence = D2.create_throughstream();
    confluence.pipe($((function(_this) {
      return function(glyph, send) {
        return send([
          'dump', {
            take: 30,
            prefix: "so|glyph:" + glyph + "|reading/py"
          }
        ]);
      };
    })(this))).pipe(SOBAC.$emit(socket)).pipe($((function(_this) {
      return function(event, send, end) {
        count += 1;
        if (event != null) {
          info("-<" + count + ">-", "" + event[1] + " " + event[2]['key']);
        } else {
          warn('---');
        }
        send(event);
        if (end != null) {
          warn("stream ended");
          return end();
        }
      };
    })(this)));
    for (_i = 0, _len = glyphs.length; _i < _len; _i++) {
      glyph = glyphs[_i];
      confluence.write(glyph);
    }
    return confluence.end();
  });

  socket.on('helo', (function(_this) {
    return function(data) {
      return help('updated-client-id', data['client-id']);
    };
  })(this));

  this._new_id = function() {
    return random_integer(1e5, 1e6);
  };


  /* TAINT `me` simplifyingly set to `socket` */

  this.$emit_groups = function(me) {

    /* In a stream of incoming 'trigger' events of the form `[ type, payload..., ]`, the `$emit_groups` transform
    will emit events one by one to the far side using the WebSocket connection represented by `me`; it will
    pause the stream between events until the far side has signalled completion for the present event by
    sending a `null` event. Thus, a simple synchronization between client and server is achieved. Furthermore,
    randomly individualized events of the form `[ "#{type}##{id}", ... ]` are actually used in order to
    prevent the handler from inadvertently catching spurious events originating from concurrent code. All
    event listeners are cleared on completion. Downstream transforms will see multiple `null` events, one for
    each of all the incoming trigger events.
    
    Example (with a database of CJK characters and a backend that supports a `dump` event):
    
    ```coffee
    glyphs      = CHR.chrs_from_text '一二三'
    count       = 0
    confluence  = D2.create_throughstream()
    confluence
      .pipe $ ( glyph, send ) =>
        send [ 'dump', { prefix: "so|glyph:#{glyph}|reading/py", }, ]
      .pipe SOBAC.$emit_groups socket
      .pipe $ ( event, send, end ) =>
        count += 1
        if event? then  info "-<#{count}>-", "#{event[ 1 ]} #{event[ 2 ][ 'key' ]}"
        else            warn '---'
        send event
        if end?
          warn "stream ended"
          end()
    for glyph in glyphs
      confluence.write glyph
    confluence.end()
    ```
    
    This will produce:
    
    ```
    -<1>- 0 so|glyph:一|reading/py/base:yi|0
    -<2>- 1 so|glyph:一|reading/py:yī|0
    ---
    -<4>- 0 so|glyph:二|reading/py/base:er|0
    -<5>- 1 so|glyph:二|reading/py:èr|0
    ---
    -<7>- 0 so|glyph:三|reading/py/base:san|0
    -<8>- 1 so|glyph:三|reading/py:sān|0
    ---
    ´´´
    
    We practically have 'expanded' the stream from glyphs to LevelDB keys containing further information. Of
    course, depending on data available, each block may contain any number of response events. By contrast,
    what you will get using the non-grouping `$emit` transform instead is this:
    
    ´´´
    -<1>- 0 so|glyph:一|reading/py/base:yi|0
    -<2>- 0 so|glyph:二|reading/py/base:er|0
    -<3>- 0 so|glyph:三|reading/py/base:san|0
    -<4>- 1 so|glyph:一|reading/py:yī|0
    -<5>- 1 so|glyph:二|reading/py:èr|0
    -<6>- 1 so|glyph:三|reading/py:sān|0
    ´´´
     */
    return $((function(_this) {
      return function(event, send) {
        var id, payload, type, type_with_id;
        send.pause();
        type = event[0], payload = 2 <= event.length ? __slice.call(event, 1) : [];
        id = _this._new_id();
        type_with_id = "" + type + "#" + id;
        return (function(type_with_id) {
          me.on(type_with_id, function(event) {
            send(event);
            if (event == null) {
              send.resume();
              return me.removeAllListeners(type_with_id);
            }
          });
          return me.emit.apply(me, [type_with_id].concat(__slice.call(payload)));
        })(type_with_id);
      };
    })(this));
  };


  /* TAINT `me` simplifyingly set to `socket` */

  this.$emit = function(me) {
    var last_twi;
    last_twi = null;
    return $((function(_this) {
      return function(event, send, end) {
        var id, payload, type, type_with_id;
        if (event != null) {
          type = event[0], payload = 2 <= event.length ? __slice.call(event, 1) : [];
          id = _this._new_id();
          type_with_id = "" + type + "#" + id;
          (function(type_with_id) {
            if (end != null) {
              last_twi = type_with_id;
            }
            me.on(type_with_id, function(event) {
              if (event != null) {
                send(event);
              }
              if (event == null) {
                me.removeAllListeners(type_with_id);
                if (last_twi === type_with_id) {
                  return end();
                }
              }
            });
            return me.emit.apply(me, [type_with_id].concat(__slice.call(payload)));
          })(type_with_id);
        }
        if ((end != null) && (event == null)) {
          return end();
        }
      };
    })(this));
  };

  this.dump_ng = function(me, settings) {
    return this.emit_as_sorted_stream(me, 'dump', settings);
  };

  this.emit_as_stream = function(me, type, data) {
    return this._emit_as_stream(me, type, data, false);
  };

  this.emit_as_sorted_stream = function(me, type, data) {
    return this._emit_as_stream(me, type, data, true);
  };

  this._emit_as_stream = function(me, type, data, sorted) {

    /* TAINT `me` simplifyingly set to `socket` */
    var $deliver, $unwrap, R, id, output, type_with_id;
    id = this._new_id();
    type_with_id = "" + type + "#" + id;

    /* TAINT couldn't get this to work without using two throughstreams */
    R = D2.create_throughstream();
    output = D2.create_throughstream();
    $unwrap = $((function(_this) {
      return function(event, send) {
        var payload, tail, _;
        type = event[0], tail = 2 <= event.length ? __slice.call(event, 1) : [];
        if (event[0] === 'batch') {
          _ = event[0], _ = event[1], payload = 3 <= event.length ? __slice.call(event, 2) : [];
          return send(payload.length === 1 ? payload[0] : payload);
        }
      };
    })(this));
    $deliver = $((function(_this) {
      return function(event, send) {
        return R.write(event);
      };
    })(this));
    me.on(type_with_id, function(event) {
      if (event != null) {
        return output.write(event);
      } else {
        me.removeAllListeners(type_with_id);
        return output.end();
      }
    });
    if (sorted) {
      output.pipe(D2.$densort(1, 0)).pipe($unwrap).pipe($deliver);
    } else {
      output.pipe($unwrap).pipe($deliver);
    }
    me.emit(type_with_id, data);
    return R;
  };

  SOBAC = this;

}).call(this);
